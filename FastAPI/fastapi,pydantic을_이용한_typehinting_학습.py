# -*- coding: utf-8 -*-
"""FastAPI,Pydantic을 이용한 TypeHinting  학습.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1goAMCZEhkVGwwA2oI7y83CFEWlB9sYnx
"""

#기존의 Flask나 Django와는 달리 Fast API는 Type Hints를 사용하고 있다.
#Type Hints는 파라미터 값이어떤 자료형이 들어와야하는 지 코드 상에서 명시하는 것이다


from pydantic import BaseModel
from typing import Optional

class User(BaseModel):
  id: int
  name = 'junbo'
  age : Optional[str] = None

user = User(id='123')
assert user.id == 123

#Parsing Library, Not for data Validation


from pydantic import BaseModel

class Model(BaseModel):
  a:int
  b:float
  c:str

  print(Model(a=3.145, b=' 2.72', c=123).dict())

  # b의 값이 str으로 들어와도 이를 float으로 Parsing 해준다

  print(Model(a=3.145, **b=' asd'**, c=123).dict()) 

  # 만약 Parsing이 불가능한 데이터 형식이 들어왔을 때는 Validation error를 raise한다.

#Model Recursion

#데이터 형식을 명시하는 Pydantic은 사용자가 정의한 클래스 또한 annotation을 할 수 있다.

from typing import List
from pydantic import BaseModel

class Foo(BaseModel):
    count: int
    size: float = None

class Bar(BaseModel):
    apple = 'x'
    banana = 'y'

class Spam(BaseModel):
    foo: **Foo**
    bars: **List[Bar]**

m = Spam(foo={'count': 4}, bars=[{'apple': 'x1'}, {'apple': 'x2'}])
print(m)
#> foo=Foo(count=4, size=None) bars=[Bar(apple='x1', banana='y'),
#> Bar(apple='x2', banana='y')]
print(m.dict())
"""
{
    'foo': {'count': 4, 'size': None},
    'bars': [
        {'apple': 'x1', 'banana': 'y'},
        {'apple': 'x2', 'banana': 'y'},
    ],
}
"""













