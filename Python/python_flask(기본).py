# -*- coding: utf-8 -*-
"""Python-Flask(기본).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13RrkdkPUzmjStSp9TI0qh3ngDj6Ppjpo
"""

# 파이썬썬 - Flask

# flask 란?

#Flask 는 Django와 더불어 가장 많이 활용되는 Python Web Framework 이다.

# Framework란 무엇일까?

#Framework는 "애플리케이션 개발에 바탕이되는 템플릿과 같은 클래스들의 집합" 이라고 이해하면 된다. 즉, 어떤 프로그램을 만들기 위한 기본 틀을 프레임워크라고 한다다.

# 프레임워크와 라이브러리의 차이는 무엇일까?

#라이브러리란 "반복되는 코드 작성을 없애기 위해 언제든지 필요한곳에서 호출하여 사용할 수 있도록 만들어놓은 클래스나 함수모음" 을 말한다.


# Flask의 특징

#Flask는 마이크로 프레임워크이다. 마이크로 프레임워크란 웹 개발에 필요한 최소 기능만 제공하며,

 #나머지 기능은 자신이 원하는 다른 라이브러리나 프레임워크를 확장해 사용한다. 빠르게 원하는 기능을 기반으로 웹서비스 구축이 가능하다는 것이 장점이다

#마이크로 프레임워크의 반대 개념은 풀스택 프레임워크이다. 

#풀스택 프레임워크란 요청/응답 추상화, 세션 상태 관리, 사용자 인증 및 권한 관리, 데이터베이스 접근, 보안, 캐시 등등 웹 개발에 관련된 모든 기능을 제공하는 프레임워크이다. 

#대표적으로 JAVA Spring, Python Django, Ruby on Rails 등이 있다.

# 1. 파이썬 - Flask 실행

# 1.1 객체 생성

from flask import Flask

app = Flask(__name__)

# 1.2 웹서버 실행

from flask import Flask

app = Flask(__name__)

@app.route("/test")
def hello():
  return "hello world"

host_addr = "0.0.0.0"
port_num = "8080"

if __name__ == "__main__" :

  app.run(host=127.0.0.1,port=8080,debug=True)


# host address 와 post number를 지정해서 웹 서버를 실행해줄 수 있다.

# 2. 파이썬 - Flask 라우팅


# 2.1 라우팅


from flask import Flask

app = Flask(__name__) 

@app.route("/test") 
def hello():
    return "Hello World!"

""" @app.route("/test") == 127.0.0.1:8080/test
    즉, URL을 정의하며 요청이 들어오면 하위 함수를 실행하여 값을 리턴해준다. """

# 2.2 라우팅 - 정적 페이지지 리턴하기 

from flask import Flask

app = Flask(__name__)
@app.route("/")
def hello():                           
    return "<h1>Hello World!</h1>"

@app.route("/hello")
def hello_flask():
    return "<h1>Hello Flash!</h1>"

@app.route("/first")
def hello_first():
    return "<h3>Hello First</h3>"

if __name__ == "__main__":              
    app.run(host="127.0.0.1", port="8080")

# 2.3 URI 를 변수로 사용하기

#URI

#URI는 특정 리소스를 식별하는 통합 자원 식별자(Uniform Resource Identifier)를 의미한다. 
#웹 기술에서 사용하는 논리적 또는 물리적 리소스를 식별하는 고유한 문자열 시퀀스다.


from flask import Flask

app = Flask(__name__)
@app.route("/first/<username>")
def get_first(username):
    return "<h3>Hello " + username + "!</h3>"

if __name__ == "__main__":              
    app.run(host="127.0.0.1", port="8080")

# """ 위와 같이 <> 를 사용하면 웹브라우저를 통해 변수를 넘겨받아 사용할 수 있다. """

# 2.4 라우팅 - URI 를 변수의 자료형을 정의하여 사용하기

from flask import Flask

app = Flask(__name__)

@app.route("/message/<int:message_id>")
def get_message(message_id):
    return "message id: %d" % message_id   # %d 는 int, %f 는 float, %s 는 string

# """ 위와 같이 <int:변수명> 을 사용하면 변수 형태를 정의할 수 있다. 정의하지 않으면 기본 값은 str""" 

if __name__ == "__main__":
    app.run(host="0.0.0.0", port="8080")

# 2.5 라우팅 - URI 를 변수로 넘겨받아 계산하기

from flask import Flask

app = Flask(__name__)

def add_file(data):
    return data + 5

@app.route("/first/<int:messageid>")
def get_first(messageid):
    data = add_file(messageid)
    return "<h1>%d</h1>" % (data)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port="8080")

# 3. 파이썬 - Flask Json 데이터 리턴

# 3.1 RestAPI - JSON 데이터 리턴하기

from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/json_test')
def hellow_json():
    data = {'name' : 'taekyeong'}
    return jsonify(data)

@app.route('/server_info')
def server_inf0():
    data = {'host': '127.0.0.1', 'port': '8080'}
    return jsonify(data)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port="8080")

# """ flask에 내장되어 있는 jsonify 모듈을 사용해서 JSON 데이터를 전달할 수 있다."""